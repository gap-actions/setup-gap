name: 'Setup GAP for package testing'
description: 'Download and compile CI scripts, GAP and its packages'
inputs:
  GAP_PKGS_TO_CLONE:
    description: 'the GAP packages to clone'
    required: false
    default: ''
  GAP_PKGS_TO_BUILD:
    description: 'the GAP packages to build'
    required: false
    default: 'io profiling'
  GAPBRANCH:
    description: 'the gap branch to clone'
    required: false
    default: 'master'
  HPCGAP:
    description: 'build HPC-GAP if set to yes'
    required: false
    default: 'no'
  ABI:
    description: 'set to 32 to use 32bit build flags for the package'
    required: false
    default: ''
  GAP_BOOTSTRAP:
    description: 'make bootstrap-pkg-? (i.e. full/minimal)'
    required: false
    default: 'full'
env:
  CHERE_INVOKING: 1
runs:
  using: "composite"
  steps:
      - name: "Install dependencies"
        run: |
          echo "Installing dependencies"
          if [ "${{runner.os}}" = "Linux" ]; then
            if [ "${{inputs.ABI}}" = "32" ]; then
              sudo dpkg --add-architecture i386
              sudo apt-get update
              packages=(
                libgmp-dev:i386
                libreadline-dev:i386
                zlib1g-dev:i386
                gcc-multilib
                g++-multilib
              )
            else
              packages=(
                libgmp-dev
                libreadline-dev
                zlib1g-dev
              )
            fi
            sudo apt-get install "${packages[@]}"
          elif [ "${{runner.os}}" = "macOS" ]; then
            if [ "${{inputs.ABI}}" = "32" ]; then
              echo "Can't use macOS with 32bit!"
              exit 1
            fi
            brew install gmp zlib && brew link zlib
          fi
        shell: bash

      - name: "Clone GAP"
        shell: bash
        run: git clone --depth=2 -b ${{ inputs.GAPBRANCH }} https://github.com/gap-system/gap.git $HOME/gap

      - name: "Build GAP"
        shell: bash
        env:
          ABI: ${{ inputs.ABI }}
        run: |
          cd $HOME/gap
          
          # for HPC-GAP, add suitable flags
          if [[ ${{ inputs.HPCGAP }} = yes ]]; then
            GAP_CONFIGFLAGS="$GAP_CONFIGFLAGS --enable-hpcgap"
          fi
          
          # build GAP in a subdirectory
          ./autogen.sh
          ./configure $GAP_CONFIGFLAGS
          make -j4 V=1
          
          # make it available
          ln -s $HOME/gap/bin/gap.sh /usr/local/bin/gap

      - name: "Download packages"
        shell: bash
        run: |
          cd $HOME/gap

          # download packages; instruct wget to retry several times if the
          # connection is refused, to work around intermittent failures.
          # for older versions, set WGET, for GAP >= 4.11 set DOWNLOAD
          WGET="wget -N --no-check-certificate --tries=5 --waitretry=5 --retry-connrefused"
          make bootstrap-pkg-${{ inputs.GAP_BOOTSTRAP }} DOWNLOAD="$WGET" WGET="$WGET"
          
      - name: "Clone additional GAP packages"
        shell: bash
        run: |
          # optionally: clone specific package versions, in case we need to test
          # with development versions
          cd $HOME/gap/pkg
          for pkg in ${{ inputs.GAP_PKGS_TO_CLONE }}; do
              # delete any existing variants of the package to avoid multiple versions
              # from being compiled later on
              rm -rf "$pkg"*
              if [[ "$pkg" =~ ^http ]] ; then
                  # looks like a full URL
                  git clone "$pkg"
              elif [[ "$pkg" =~ ^[^/]+/[^/]+$ ]] ; then
                  # looks like ORG/REPO
                  git clone https://github.com/"$pkg"
              elif [[ "$pkg" =~ ^[^/]+$ ]] ; then
                  # looks like just a REPO name
                  git clone https://github.com/gap-packages/"$pkg"
              else
                  echo "Invalid package name or URL '$pkg' in GAP_PKGS_TO_CLONE"
                  exit 1
              fi
          done
          
      - name: "Build additional GAP packages"
        shell:  bash
        env:
          ABI: ${{ inputs.ABI }}
        run: |
          # build some packages
          BuildPackagesOptions="--strict"
          cd $HOME/gap/pkg
          for pkg in ${{inputs.GAP_PKGS_TO_BUILD}}; do
              ../bin/BuildPackages.sh ${BuildPackagesOptions} $pkg*
          done
